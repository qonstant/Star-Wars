{"ast":null,"code":"var _jsxFileName = \"/Users/rakymzhan/Desktop/swapi/Star-Wars/src/App.js\";\nimport React from \"react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport Home from \"./components/Home\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles/styles.css\";\n\n//@ staleTime: fetching time to keep fetched data fresh\n//           - It will refetch to see if there any updated data\n//             that will render to the dom and keep it fresh\n\n//@ cacheTime: this is how long stale queries are cached for\n//              before they are disposed of\n//          Ex: If we go on to another component and\n//              back again it will use cached data and\n//              it will really quick to load for cache time\n//              (default: 300,000 ms)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst queryClient = new QueryClient();\n\n/////////////////   SET default query options   ////////////////////\n\nqueryClient.setDefaultOptions({\n  queries: {\n    // staleTime: 0,\n    // cacheTime: 300000,\n  }\n});\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(QueryClientProvider, {\n    client: queryClient,\n    children: [/*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactQueryDevtools, {\n      initialIsOpen: fals\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","QueryClient","QueryClientProvider","ReactQueryDevtools","Home","jsxDEV","_jsxDEV","queryClient","setDefaultOptions","queries","App","client","children","fileName","_jsxFileName","lineNumber","columnNumber","initialIsOpen","fals","_c","$RefreshReg$"],"sources":["/Users/rakymzhan/Desktop/swapi/Star-Wars/src/App.js"],"sourcesContent":["import React from \"react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nimport { ReactQueryDevtools } from \"react-query/devtools\";\n\nimport Home from \"./components/Home\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles/styles.css\";\n\n//@ staleTime: fetching time to keep fetched data fresh\n//           - It will refetch to see if there any updated data\n//             that will render to the dom and keep it fresh\n\n//@ cacheTime: this is how long stale queries are cached for\n//              before they are disposed of\n//          Ex: If we go on to another component and\n//              back again it will use cached data and\n//              it will really quick to load for cache time\n//              (default: 300,000 ms)\n\nconst queryClient = new QueryClient();\n\n/////////////////   SET default query options   ////////////////////\n\nqueryClient.setDefaultOptions({\n  queries: {\n    // staleTime: 0,\n    // cacheTime: 300000,\n  },\n});\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Home />\n      <ReactQueryDevtools initialIsOpen={fals} />\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,mBAAmB,QAAQ,aAAa;AAE9D,SAASC,kBAAkB,QAAQ,sBAAsB;AAEzD,OAAOC,IAAI,MAAM,mBAAmB;AAEpC,OAAO,sCAAsC;AAC7C,OAAO,qBAAqB;;AAE5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,WAAW,GAAG,IAAIN,WAAW,CAAC,CAAC;;AAErC;;AAEAM,WAAW,CAACC,iBAAiB,CAAC;EAC5BC,OAAO,EAAE;IACP;IACA;EAAA;AAEJ,CAAC,CAAC;AAEF,SAASC,GAAGA,CAAA,EAAG;EACb,oBACEJ,OAAA,CAACJ,mBAAmB;IAACS,MAAM,EAAEJ,WAAY;IAAAK,QAAA,gBACvCN,OAAA,CAACF,IAAI;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACRV,OAAA,CAACH,kBAAkB;MAACc,aAAa,EAAEC;IAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAE1B;AAACG,EAAA,GAPQT,GAAG;AASZ,eAAeA,GAAG;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}